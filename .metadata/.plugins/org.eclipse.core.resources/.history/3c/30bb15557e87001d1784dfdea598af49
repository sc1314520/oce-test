package proxy;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;

public class ProxyTest {
	public static void main(String[] args) {
		Lenovo lenovo =new Lenovo();
		
		//動態代理增強 (類加載器,接口數組,處理器）
		SaleComputer proxy_lenovo = (SaleComputer)Proxy.newProxyInstance(lenovo.getClass().getClassLoader(),lenovo.getClass().getInterfaces(), new InvocationHandler() {
			
			// 代理邏輯編寫的方法：代理對象調用的所有方法都會觸發該方法執行。
			@Override
			public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
//				System.out.println("該方法執行了!!");
//				System.out.println(method.getName()); // 調用的方法
//				System.out.println(args[0]); // 傳遞的實際參數
				
				//判斷是否為sale方法
				if(method.getName().equals("sale")) {
					double money =(double) args[0];
					Object obj = method.invoke(lenovo, args);
					money=money*0.85;
				}
				
				// 使用真實對象調用該方法
				Object obj = method.invoke(lenovo, args);
				return obj;
			}
		});
		
		
		String computer =proxy_lenovo.sale(8000);
		System.out.println(computer);
		
		proxy_lenovo.show();
	}
}
